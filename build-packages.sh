#!/usr/bin/env bash
set -e

# ============================================================
#  build-packages.sh ‚Äî package your Java application to:
#    üêßLinux (.deb, .rpm)
#    Windows (.exe) ü™ü
#    üçémacOS (.pkg)
#
#  Requirements:
#    - JDK 17+ with jpackage (ex: openjdk-17-jdk)
#    - For Windows/macOS: have appropriate environments or remote Wine/SDK
# ============================================================

APP_NAME="lettera"
APP_VERSION="0.0.1"
MAIN_JAR="app-${APP_VERSION}.jar"
MAIN_CLASS="io.francitoshi.lettera.Main"

# Path of the ZIP generated by Gradle
ZIP_PATH="app/build/distributions/lettera-${APP_VERSION}.zip"

# Temporary and output directories
TMP_UNZIP_DIR="build/tmp_unzip"
RUNTIME_DIR="runtime"
OUTPUT_DIR="dist"

ICON_LINUX="assets/lettera.png"
ICON_WIN="assets/lettera.ico"
ICON_MAC="assets/lettera.icns"

# ============================================================
# üîß Preparation
# ============================================================
echo "=== üîç Preparing the environment ==="

if [ ! -f "$ZIP_PATH" ]; then
  echo "‚ùå ZIP file not found: $ZIP_PATH"
  echo "üí° Make sure you have executed: ./gradlew distZip"
  exit 1
fi

mkdir -p "$TMP_UNZIP_DIR" "$OUTPUT_DIR"

echo "=== üì¶ Decompressing ${ZIP_PATH} ==="
unzip -qo "$ZIP_PATH" -d "$TMP_UNZIP_DIR"

# The ZIP normally contains an internal folder with the same name
# E.g.: tmp_unzip/lettera-0.0.1/
INNER_DIR=$(find "$TMP_UNZIP_DIR" -maxdepth 1 -type d -name "lettera-*")
if [ -z "$INNER_DIR" ]; then
  echo "‚ùå No internal folder found within the ZIP"
  exit 1
fi

INPUT_DIR="${INNER_DIR}/lib"

if [ ! -d "$INPUT_DIR" ]; then
  echo "‚ùå The library directory was not found inside the ZIP: $INPUT_DIR"
  exit 1
fi

# ============================================================
# üî® Create reduced runtime
# ============================================================
echo "=== üß© Creando runtime reducido ==="
rm -rf "${RUNTIME_DIR}"
jlink \
  --no-header-files \
  --no-man-pages \
  --compress=2 \
  --strip-debug \
  --module-path "$JAVA_HOME/jmods" \
  --add-modules java.base,java.desktop,java.logging,java.net.http \
  --output "${RUNTIME_DIR}"

# ============================================================
# üêß Linux (.deb & .rpm)
# ============================================================
echo "=== üêß Generating installers for Linux ==="

jpackage \
  --type deb \
  --name "${APP_NAME}" \
  --app-version "${APP_VERSION}" \
  --input "${INPUT_DIR}" \
  --main-jar "${MAIN_JAR}" \
  --main-class "${MAIN_CLASS}" \
  --runtime-image "${RUNTIME_DIR}" \
  --icon "${ICON_LINUX}" \
  --dest "${OUTPUT_DIR}" \
  --linux-shortcut \
  --linux-menu-group "Internet" \
  --resource-dir resources

jpackage \
  --type rpm \
  --name "${APP_NAME}" \
  --app-version "${APP_VERSION}" \
  --input "${INPUT_DIR}" \
  --main-jar "${MAIN_JAR}" \
  --main-class "${MAIN_CLASS}" \
  --runtime-image "${RUNTIME_DIR}" \
  --icon "${ICON_LINUX}" \
  --dest "${OUTPUT_DIR}" \
  --linux-shortcut \
  --linux-menu-group "Internet"

# ============================================================
# ü™ü Windows (.exe)
# ============================================================
echo "=== ü™ü Generating installer for Windows (.exe) ==="
if [ -f "${ICON_WIN}" ]; then
  jpackage \
    --type exe \
    --name "${APP_NAME}" \
    --app-version "${APP_VERSION}" \
    --input "${INPUT_DIR}" \
    --main-jar "${MAIN_JAR}" \
    --main-class "${MAIN_CLASS}" \
    --runtime-image "${RUNTIME_DIR}" \
    --icon "${ICON_WIN}" \
    --dest "${OUTPUT_DIR}" \
    --win-menu \
    --win-shortcut \
    --win-dir-chooser || echo "‚ö†Ô∏è Could not generate Windows installer (requires Windows or Wine environment)"
else
  echo "‚ö†Ô∏è Skipping Windows: Missing .ico icon or proper environment"
fi

# ============================================================
# üçé macOS (.pkg)
# ============================================================
echo "=== üçé Generating installer for macOS (.pkg) ==="
if [ -f "${ICON_MAC}" ]; then
  jpackage \
    --type pkg \
    --name "${APP_NAME}" \
    --app-version "${APP_VERSION}" \
    --input "${INPUT_DIR}" \
    --main-jar "${MAIN_JAR}" \
    --main-class "${MAIN_CLASS}" \
    --runtime-image "${RUNTIME_DIR}" \
    --icon "${ICON_MAC}" \
    --dest "${OUTPUT_DIR}" \
    --mac-package-identifier "io.francitoshi.lettera" \
    --mac-package-name "${APP_NAME}" || echo "‚ö†Ô∏è The macOS installer could not be generated"
else
  echo "‚ö†Ô∏è Skipping macOS: Missing .icns icon or proper environment"
fi

# ============================================================
# üßπ Final cleaning
# ============================================================
echo "=== üßπ Limpiando temporales ==="
rm -rf "${TMP_UNZIP_DIR}" "${RUNTIME_DIR}"
# ============================================================
# üéâ Final resultl
# ============================================================
echo
echo "‚úÖ Generated packages (if possible):"
ls -lh "${OUTPUT_DIR}"
echo
echo "üì¶ Files ready in: ${OUTPUT_DIR}/"
